<?php

/**
 * @file
 * Main functionality for Notes Field module.
 */

/**
 * @todo use native field option to limit results.
 * @todo field with delta 0 is Note field, other fields are disabled from editing.
 * @todo instead of drag-n-drop field widget has its own theme function which separates field with delta 0
 * @todo and moves other fields to the table ordered by last updated date DESC.
 * @todo Investigate and figure out how to theme whole widget containing multivalued fields.
 * @todo The idea is to get an array of values of the single multivalued field and to output it as
 * @todo textarea (delta 0) and table (delta >= 1).
 * @todo think if cardinality field settings is good enough to replace items_total setting which is more flexible.
 * @see https://www.commercialprogression.com/post/how-remove-tabledrag-rearranging-multiple-value-field-widgets
 */

/**
 * Implements hook_field_info().
 */
function notes_field_field_info() {
  return array(
    'notes_field' => array(
      'label' => t('Notes'),
      'description' => t('Field for taking notes.'),
      'settings' => array(
        'notes_size' => 3,
        'notes_placeholder' => 'Create a note',
        'notes_maxlength' => 10,
        'limit_per_table' => 10,
        'pager' => TRUE,
      ),
      'instance_settings' => array(),
      'default_widget' => 'notes_field_widget',
      'default_formatter' => 'notes_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function notes_field_field_is_empty($item, $field) {
  // @todo update hook with actual values.
  if (empty($item['note']) && $item['note'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function notes_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['notes_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of Notes field (rows)'),
    '#default_value' => $settings['notes_size'],
    '#required' => TRUE,
    '#description' => t('Specify the visible number of lines in "Note" field.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['notes_placeholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Placeholder for blank Notes field'),
    '#default_value' => $settings['notes_placeholder'],
    '#required' => FALSE,
    '#description' => t('Specifies a short hint that describes the expected value of the text area.'),
  );

  $form['notes_maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of characters user can enter'),
    '#default_value' => $settings['notes_maxlength'],
    '#required' => TRUE,
    '#description' => t('Specifies the maximum number of characters allowed in the text area. Set 0 for no limit.'),
    '#element_validate' => array('notes_field_validate_integer_positive_or_zero'),
  );

  $form['limit_per_table'] = array(
    '#type' => 'textfield',
    '#title' => t('Display a specified number of items.'),
    '#default_value' => $settings['limit_per_table'],
    '#required' => TRUE,
    '#description' => t('Display a specified number of items. Set 0 for no limit.'),
    '#element_validate' => array('notes_field_validate_integer_positive_or_zero'),
  );

  $form['pager'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display pager'),
    '#default_value' => $settings['pager'],
    '#description' => t('Whether to display pager if number of notes added is greater that can be displayed.'),
    '#element_validate' => array('notes_field_validate_integer_positive_or_zero'),
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function notes_field_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'notes_field') {
    // Update cardinality field.
    $form['field']['cardinality']['#options'] = array(-1 => t('Unlimited')) +
      drupal_map_assoc(array(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 500));
    $form['field']['cardinality']['#default_value'] = isset($form['field']['cardinality']['#default_value']) ?
      $form['field']['cardinality']['#default_value'] : -1;
    $form['field']['cardinality']['#description'] = t('Maximum number of values users can enter for this field.');
  }
}

/**
 * Implements hook_field_validate().
 */
// @todo validate so that editor cannot change values in hidden fields manually and then to save field.
function notes_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//  foreach ($items as $delta => $item) {
//    if (!empty($item['value'])) {
//      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => 'text_max_length',
//          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
//        );
//      }
//    }
//  }
}

/**
 * Implements hook_field_presave().
 */
function notes_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'notes_field') {
    global $user;
    foreach ($items as $delta => $item) {
      if (isset($item['note'])) {
        // Set timestamps up to date and update author information.
        // @todo test and ensure than it is impossible to change author by editing the value of the field.
        $items[$delta]['uid'] = $user->uid;
        $items[$delta]['created'] = REQUEST_TIME;
        $items[$delta]['changed'] = REQUEST_TIME;
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function notes_field_field_widget_info() {
  return array(
    'notes_field_widget' => array(
      'label' => t('Notes'),
      'field types' => array('notes_field'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT, // @todo implement that user can create 2 (? 3) or more fields.
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function notes_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $user;

  $element['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Note'),
    '#default_value' => isset($items[$delta]['note']) ? $items[$delta]['note'] : '',
    '#attributes' => array(
      'maxlength' => $field['settings']['notes_maxlength'],
      'placeholder' => t($field['settings']['notes_placeholder']),
    ),
  );

  $element['uid'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['uid']) ? $items[$delta]['uid'] : $user->uid,
  );

  $element['created'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['created']) ? $items[$delta]['created'] : REQUEST_TIME,
  );

  $element['changed'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['changed']) ? $items[$delta]['changed'] : REQUEST_TIME,
  );

  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 */
function notes_field_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', ' notes_field');
    $theme_registry['field_multiple_value_form']['function'] =  'notes_field_theme_field_multiple_value_form';
  }
}

/**
 * Implements hook_field_widget_error().
 */
function notes_field_field_widget_error($element, $error, $form, &$form_state) {
//  form_error($element, $error['message']);
}

/**
 * Implements hook_field_formatter_info().
 */
function notes_field_field_formatter_info() {
  return array(
    'notes_field_formatter' => array(
      'label' => t('Notes Default'),
      'field types' => array('notes_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function notes_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($display['type'] == 'notes_field_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => $item['note'],
      );
    }
  }

  return $element;
}

// Helper functions.

/**
 * Overrides multiple-value form widget for 'notes' field widget form.
 * @see theme_field_multiple_value_form()
 *
 * @param $variables
 *
 * @return array
 */
function notes_field_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';

  if ($variables['element']['#field_name'] == 'field_notes') {
    // Custom function for 'notes' field widget form, field of other types have default functionality.
    // 'Notes' cardinality is always > 1 because 'notes' field makes sense only when at least 2 editors work on material.
    $output .= notes_field_theme_widget_form($variables, $element);
  }
  elseif ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        drupal_render($item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }

  return $output;
}

/**
 * Custom widget form for 'notes' field.
 *
 * @param $variables
 * @param $element
 */
function notes_field_theme_widget_form($variables, $element) {
  $table_id = drupal_html_id($element['#field_name'] . '_values');
  // @todo check if element can be required and validation should stop from saving empty field.
  $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';
  $header = array(
    array(
      'data' => '<label>' . t('!title', array('!title' => $element['#title'])) . '</label>',
      'class' => array('field-label'),
    ),
    array(
      'data' => t('Author'),
      'class' => array('field-author'),
    ),
    array(
      'data' => t('Created'),
      'class' => array('field-created'),
    ),
    array(
      'data' => t('Changed'),
      'class' => array('field-changed'),
    ),
    array(
      'data' => t('Operations'),
      'class' => array('field-operations'),
    ),
  );

  $rows_data = array();
  $empty_item = array();

  foreach ($element as $key => $item) {
    if (is_numeric($key)) {
      // @todo display other items as table rows with possible hidden values.
      if (!empty($item['note']['#default_value'])) {
        $rows_data[$key] = array(
          'note' => $item['note']['#default_value'],
          'author' => l(format_username(user_load($item['uid']['#default_value'])), 'user/' . $item['uid']['#default_value']),
          'changed' => format_date($item['changed']['#default_value'], 'short'),
          'created' => format_date($item['created']['#default_value'], 'short'),
          // @todo output as links with appropriate ajax behaviour.
          'operations' => theme('item_list', array('edit', 'remove')),
        );
      }
      else {
        // Blank field for adding new note.
        $empty_item = $item;
        if (isset($empty_item['_weight'])) {
          $empty_item['note']['#title'] = t('!title !required',
            array('!title' => $empty_item['note']['#title'], '!required' => $required));
          unset($empty_item['_weight']);
        }
      }
    }
  }

  // @todo modify to save button so that it saves note via ajax, adds it as the next row and makes textarea blank.
  // @todo if cardinality setting present ensure that button doesn't show up.
  $save_note_button = array(
    '#type' => 'submit',
    '#name' => 'field_notes_save_note',
    '#value' => t('Save Note'),
  );

  krsort($rows_data);
  $rows = array_values($rows_data);

  $output = '<div class="form-item">';
  $output .= drupal_render($empty_item);
  $output .= drupal_render($save_note_button);
  // @todo add pagination here.
  if (!empty($rows)) {
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-notes-table'))));
  }
  $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
  // @todo add pagination here.
  $output .= '</div>';

  return $output;
}

/**
 * Form element validation handler for integer elements that must be positive or 0.
 *
 * @param $element
 * @param $form_state
 */
function notes_field_validate_integer_positive_or_zero($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer or 0.', array('%name' => $element['#title'])));
  }
}
