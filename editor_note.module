<?php

/**
 * @file
 * Main functionality for Notes Field module.
 */

/**
 * @todo textarea (delta 0) and table (delta >= 1)
 * @todo check on /node/add/ - should not be possible to add notes via ajax on empty node
 * @todo think about field permissions
 * @todo test with multiple languages
 * @todo test with revisions
 */

/**
 * Implements hook_entity_info().
 */
function editor_note_entity_info() {
  $entity = array(
    'editor_note' => array(
      'label' => t('Editor Note'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'editor_note',
      'entity keys' => array(
        'id' => 'id',
      ),
      'module' => 'editor_note',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info().
 */
function editor_note_entity_property_info() {
  $properties = array(
    'id' => array(
      'type'  => 'integer',
      'label' => t('Editor Note ID'),
      'description' => t('Unique editor note ID.'),
      'schema field' => 'id',
    ),
    'note' => array(
      'type'  => 'text',
      'label' => t('Editor Note'),
      'description' => t('Content of editor note.'),
      'schema field' => 'note',
    ),
    'entity_type' => array(
      'type' => 'text',
      'label' => t('Entity Type'),
      'description' => 'The entity type editor note is attached to.',
      'schema field' => 'entity_type',
    ),
    'entity_id' => array(
      'type' => 'int',
      'label' => t('Entity ID'),
      'description' => 'The entity id editor note is attached to.',
      'schema field' => 'entity_type',
    ),
    'revision_id' => array(
      'type' => 'int',
      'label' => t('Revision ID'),
      'description' => 'The entity revision editor note is attached to.',
      'schema field' => 'revision_id',
    ),
    'uid' => array(
      'type'  => 'integer',
      'label' => t('Author UID'),
      'description' => t('The unique ID of the user who authored editor note.'),
      'schema field' => 'uid',
    ),
    'created' => array(
      'type' => 'int',
      'label' => t('Created'),
      'description' => 'The time that the note was created.',
      'schema field' => 'created',
    ),
    'changed' => array(
      'type' => 'int',
      'label' => t('Changed'),
      'description' => 'The time that the note was last edited.',
      'schema field' => 'changed',
    ),
  );

  $info['note']['properties'] = $properties;

  return $info;
}

/**
 * Saves Editor Note.
 *
 * @param $note
 * @param $entity_type
 * @param $entity
 * @param null $uid
 * @param null $created
 * @param null $changed
 */
function editor_note_save($note, $entity_type, $entity, $uid = NULL, $created = NULL, $changed = NULL) {
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
  if (!isset($revision_id)) {
    $revision_id = $entity_id;
  }
  if (!isset($uid)) {
    global $user;
    $uid = $user->uid;
  }
  $editor_note = entity_create(
    'editor_note', array(
      'note' => $note,
      'bundle' => $bundle,
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'revision_id' => $revision_id,
      'uid' => (int) $uid,
      'created' => isset($created) ? $created : REQUEST_TIME,
      'changed' => isset($changed) ? $changed : REQUEST_TIME,
    )
  );
  entity_save('editor_note', $editor_note);
}

/**
 * Implements hook_field_info().
 */
function editor_note_field_info() {
  return array(
    'editor_note' => array(
      'label' => t('Editor Notes'),
      'description' => t('Field for taking editor notes.'),
      'settings' => array(
        'notes_size' => 3,
        'notes_placeholder' => 'Create a note',
        'notes_maxlength' => 0, // @todo test if it works in IE and perform server-side validation
        'limit_per_table' => 10, // @todo implement sorting ASC / DESC in both formatter and widget
        'pager' => TRUE,
      ),
      'instance_settings' => array(),
      'default_widget' => 'editor_note_field_widget',
      'default_formatter' => 'editor_note_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function editor_note_field_is_empty($item, $field) {
  // @todo update hook with actual values.
  if (empty($item['note']) && $item['note'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function editor_note_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['notes_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of Notes field (rows)'),
    '#default_value' => $settings['notes_size'],
    '#required' => TRUE,
    '#description' => t('Specify the visible number of lines in textarea for adding note.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['notes_placeholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Placeholder for blank Notes field'),
    '#default_value' => $settings['notes_placeholder'],
    '#required' => FALSE,
    '#description' => t('Specifies a short hint that describes the expected value of the textarea.'),
  );

  $form['notes_maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of characters user can enter'),
    '#default_value' => $settings['notes_maxlength'],
    '#required' => TRUE,
    '#description' => t('Specifies the maximum number of characters allowed in the textarea. Set 0 for no limit.'),
    '#element_validate' => array('editor_note_validate_integer_positive_or_zero'),
  );

  $form['limit_per_table'] = array(
    '#type' => 'textfield',
    '#title' => t('Display a specified number of items.'),
    '#default_value' => $settings['limit_per_table'],
    '#required' => TRUE,
    '#description' => t('Display a specified number of items. Set 0 for no limit.'),
    '#element_validate' => array('editor_note_validate_integer_positive_or_zero'),
  );

  $form['pager'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display pager'),
    '#default_value' => $settings['pager'],
    '#description' => t('Whether to display pager if number of notes added is greater that can be displayed.'),
    '#element_validate' => array('editor_note_validate_integer_positive_or_zero'),
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function editor_note_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'editor_note') {
    // Update cardinality field.
    $form['field']['cardinality']['#options'] = array(-1 => t('Unlimited')) +
      drupal_map_assoc(array(5, 10, 20, 30, 40, 50, 70, 100));
    $form['field']['cardinality']['#default_value'] = isset($form['field']['cardinality']['#default_value']) ?
      $form['field']['cardinality']['#default_value'] : -1;
    $form['field']['cardinality']['#description'] = t('Maximum number of values users can enter for this field.');
  }
}

/**
 * Implements hook_field_validate().
 */
// @todo validate so that editor cannot change values in hidden fields manually and then to save field.
// @todo check field on preview and validation.
function editor_note_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//  foreach ($items as $delta => $item) {
//    if (!empty($item['value'])) {
//      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => 'text_max_length',
//          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
//        );
//      }
//    }
//  }
}

/**
 * Implements hook_field_presave().
 */
function editor_note_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
//  if ($field['type'] == 'editor_note') {
//    global $user;
//    foreach ($items as $delta => $item) {
//      if (isset($item['note'])) {
//        // Set timestamps up to date and update author information.
//        // @todo test and ensure than it is impossible to change author by editing the value of the field.
//        $items[$delta]['uid'] = !empty($items[$delta]['uid']) ? $items[$delta]['uid'] : $user->uid;
//        $items[$delta]['created'] = !empty($items[$delta]['created']) ? $items[$delta]['created'] : REQUEST_TIME;
//        $items[$delta]['changed'] = !empty($items[$delta]['changed']) ? $items[$delta]['changed'] : REQUEST_TIME; // @todo how to track changes?
//      }
//    }
//  }
}

/**
 * Implements hook_field_widget_info().
 */
function editor_note_field_widget_info() {
  return array(
    'editor_note_field_widget' => array(
      'label' => t('Editor Notes'),
      'field types' => array('editor_note'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT, // @todo implement that user can create 2 (? 3) or more fields.
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function editor_note_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['note'] = array(
    '#type' => 'textarea',
    '#title' => $instance['label'],
    '#default_value' => isset($items[$delta]['note']) ? $items[$delta]['note'] : '',
    '#attributes' => array(
      'maxlength' => $field['settings']['notes_maxlength'] > 0 ? $field['settings']['notes_maxlength'] : '',
      'placeholder' => t($field['settings']['notes_placeholder']),
    ),
  );

  $element['uid'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['uid']) ? $items[$delta]['uid'] : '',
  );

  $element['created'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['created']) ? $items[$delta]['created'] : '',
  );

  $element['changed'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['changed']) ? $items[$delta]['changed'] : '',
  );

//  $setting = array('notesFieldName' => $field['field_name'], 'notesFieldLang' => LANGUAGE_NONE);
//  $element['#attached']['js'][] = array('type' => 'setting', 'data' => $setting);
//  $element['#attached']['js'][] = drupal_get_path('module', 'editor_note') . '/js/editor_note.js';

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function notes_field_field_widget_error($element, $error, $form, &$form_state) {
//  form_error($element, $error['message']);
}

/**
 * Implements hook_field_formatter_info().
 */
function editor_note_field_formatter_info() {
  return array(
    'editor_note_field_formatter' => array(
      'label' => t('Editor Notes Table'),
      'field types' => array('editor_note'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function editor_note_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($display['type'] == 'editor_note_field_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => $item['note'],
      );
    }
  }

  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 */
function editor_note_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', ' notes_field');
    $theme_registry['field_multiple_value_form']['function'] =  'editor_note_theme_field_multiple_value_form';
  }
}

/**
 * Overrides multiple-value form widget for 'notes' field widget form.
 * @see theme_field_multiple_value_form()
 *
 * @param $variables
 *
 * @return array
 */
function editor_note_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';
  $field = field_info_field($variables['element']['#field_name']);
  if ($field['type'] == 'editor_note') {
    // Custom function for 'notes' field widget form, field of other types have default functionality.
    // 'Notes' cardinality is always > 1 because 'notes' field makes sense only when at least 2 editors work on material.
    $output .= editor_note_theme_widget_form($variables, $element);
  }
  else {
    // Otherwise use default theme function.
    $output = theme_field_multiple_value_form($variables);
  }
  return $output;
}

/**
 * Custom widget form for 'notes' field.
 *
 * @param $variables
 * @param $element
 */
function editor_note_theme_widget_form($variables, $element) {
  global $user;
  $table_id = drupal_html_id($element['#field_name'] . '_values');
  // @todo check if element can be required and validation should stop from saving empty field.
  $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';
  $add_note_button = array();
  $header = array(
    array(
      'data' => '<label>' . t('!title', array('!title' => $element['#title'])) . '</label>',
      'class' => array('field-label'),
    ),
    array(
      'data' => t('Author'),
      'class' => array('field-author'),
    ),
    array(
      'data' => t('Created'),
      'class' => array('field-created'),
    ),
    array(
      'data' => t('Changed'),
      'class' => array('field-changed'),
    ),
    array(
      'data' => t('Operations'),
      'class' => array('field-operations'),
    ),
  );

  $rows_data = array();
  $empty_item = array();

  foreach ($element as $key => $item) {
    if (is_numeric($key)) {
      $item['_weight']['#attributes']['class'][] = 'element-invisible';

      if (!empty($item['note']['#default_value'])) {
        $delta = $item['_weight']['#default_value'];
        $item['note']['#type'] = 'hidden';
        $item['note']['#theme'] = 'hidden';
        unset($item['note']['#title']);
        unset($item['note']['#attributes']);
        $operations = ($user->uid != $item['uid']['#default_value'] && $user->uid != 1) ? '' : theme('item_list',
                      array(
                        'items' => array(
                          l(t('edit'), '', array('attributes' => array('class' => array('edit-note'), 'data-delta' => $delta))),
                          l(t('remove'), '', array('attributes' => array('class' => array('remove-note'), 'data-delta' => $delta))),
                        )
                      )
                    );
        $rows_data[$key] = array(
          'data' => array(
            'note' => '<div class="note">' . $item['note']['#default_value'] . '</div>' . drupal_render($item['note']) . drupal_render($item['_weight']),
            'author' => l(format_username(user_load($item['uid']['#default_value'])), 'user/' . $item['uid']['#default_value']),
            'changed' => format_date($item['changed']['#default_value'], 'short'),
            'created' => format_date($item['created']['#default_value'], 'short'),
            'operations' => $operations,
          ),
          'class' => array('note-' . $delta),
        );
      }
      else {
        // @todo if cardinality setting present ensure that textarea doesn't show up.
        // @todo blank field for adding new note.
        $empty_item = $item;
        if (isset($empty_item['_weight'])) {
          $empty_item['note']['#title'] = t('!title !required',
            array('!title' => $empty_item['note']['#title'], '!required' => $required));
          $empty_item['note']['#attributes']['class'][] = 'add-note';
          $empty_item['note']['#description'] = isset($element['#description']) ? $element['#description'] : '';
        }

        // @todo modify to save button so that it saves note via ajax, adds it as the next row and makes textarea blank.
        // @todo if cardinality setting present ensure that button doesn't show up.
        $add_note_button = array(
          '#type' => 'submit',
          '#name' => $element['#field_name'] . '_save_note',
          '#value' => t('Add Note'),
        );
      }
    }
  }

  krsort($rows_data);
  $rows = array_values($rows_data);

  $output = '<div class="form-item">';
  $output .= drupal_render($empty_item);
  $output .= drupal_render($add_note_button);
  // @todo add pagination here.
  if (!empty($rows)) {
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-notes-table'))));
  }
  // @todo add pagination here.
  $output .= '</div>';

  return $output;
}

/**
 * Form element validation handler for integer elements that must be positive or 0.
 *
 * @param $element
 * @param $form_state
 */
function editor_note_validate_integer_positive_or_zero($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer or 0.', array('%name' => $element['#title'])));
  }
}
